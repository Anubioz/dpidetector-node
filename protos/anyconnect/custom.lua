local sp      = require"subprocess"
local req     = require"checker.requests"
local json    = require"cjson"
local utils   = require"checker.utils"
local sleep   = utils.sleep
-- local wait    = utils.wait
local log     = utils.logger
local check   = utils.check
-- local getconf = utils.getconf

local _C = {}

_C.proto = "anyconnect"
_C.interface_name = "oc"
_C.type = "transport"

_C.connect = function(server)
  log.debug"==== –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===="
  log.print"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
  log.debug(("(—Å–µ—Ä–≤–µ—Ä: %s)"):format(server.domain))

  log.debug"===== –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É ====="
  local meta_r = req{
    url = ("https://%s:%d/%s"):format(server.domain, server.port, _C.proto),
    headers = _G.headers,
  }
  log.debug"===== –ó–∞–≤–µ—Ä—à–µ–Ω–æ ====="

  log.debug"===== –ü–æ–ø—ã—Ç–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ ====="
  if meta_r:match"^%[" or meta_r:match"^%{" then
    local ok, res = pcall(json.decode, meta_r)
    if ok
      and res.port
      and res.host
      and res.login
      and res.password
      and res.test_host
      and res.test_port
      and res.server_ip
    then
      server.meta = res
    else
      log.bad(("–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: %s"):format(meta_r))
      return false
    end
  end
  log.debug"===== –ó–∞–≤–µ—Ä—à–µ–Ω–æ ====="

  local _E = {}

  log.debug"===== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ====="
  --- HACK: –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å stdin –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ç–∞–∫ —á—Ç–æ ü©ºü©ºü©º
  ---  –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–∏–µ stdin = sp.PIPE, –∏ –ø–æ—Ç–æ–º –≤ _C.oc_proc.stdin –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
  ---  –æ–¥–Ω–∞–∫–æ —Ç–∞–º –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è userdata, –∏ –ø–∏—Å–∞—Ç—å —Ç—É–¥–∞ —á–µ—Ä–µ–∑ :write() –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç

  local pwd_fd = io.open("/tmp/pwd","w+")
  pwd_fd:write(server.meta.password)
  pwd_fd:flush()
  pwd_fd:close()

  _C.oc_proc, _E.errmsg, _E.errno = sp.popen{
    "sh", "-c",
    table.concat({
      "openconnect",
      "--user=%s",
      "--passwd-on-stdin",
      "--non-inter",
      "--interface=%s",
      "--server=%s:%d",
      "<",
      "/tmp/pwd"
    }, " "
    ):format(
      server.meta.login,
      _C.interface_name,
      server.meta.host,
      server.meta.port
    ),
    stdout = _G.log_fd or _G.stdout,
    stderr = _G.log_fd or _G.stderr,
  }
  if not _C.oc_proc or _C.oc_proc:poll() then
    log.bad(("–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏! –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: %s. –ö–æ–¥: %d"):format(_E.errmsg, _E.errno))
    if _C.oc_proc then _C.oc_proc:kill() end
    _C.oc_proc = nil
    return false
  end
  log.debug"===== –ó–∞–≤–µ—Ä—à–µ–Ω–æ ====="
  local finished = false
  local count = 0
  log.debug"===== –í—Ö–æ–¥ –≤ —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ====="
  repeat
    local e = sp.call{
      "sh",
      "-c",
      ("ip link show | grep -q %s"):format(_C.interface_name),
    }
    if e == 0 then finished = true end
    count = count + 1
    log.debug(("====== –ò—Ç–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %d ======"):format(count))
    sleep(1)
  until finished==true or count>=20
  log.debug"===== –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ====="
  if finished == false then
    log.bad"–ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∞!"
    return false
  end
  log.good"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
  log.debug"==== –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===="
  return true
end

_C.disconnect = function(_server)
  log.debug"==== –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===="
  if _C.oc_proc then
    log.print"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    _C.oc_proc:terminate()
    _C.oc_proc:wait()
    _C.oc_proc = nil
  else
    log.bad"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è, –Ω–æ –∏—Å—á–µ–∑–ª–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ù—É–∂–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞!"
  end
  local finished = false
  local count = 0
  log.debug"===== –í—Ö–æ–¥ –≤ —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ====="
  repeat
    count = count + 1
    log.debug(("====== –ò—Ç–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %d ======"):format(count))
    local e = sp.call{
      "sh",
      "-c",
      ("ip link show | grep -q %s"):format(_C.interface_name),
    }
    if e == 1 then finished = true end
    sleep(1)
  until finished==true or count>=20
  log.debug"===== –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ====="
  if finished == false then
    log.bad"–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ç—É–Ω–µ–ª–ª–∏—Ä—É—é—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ 20 —Å–µ–∫—É–Ω–¥)!"
    log.bad"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    _G.need_restart = true
  end
  log.debug"==== –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===="
end

_C.checker = function(server)
  log.debug"==== –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ===="
  log.print"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç–∞"
  local res = req{
    url = ("http://%s:%d/"):format(server.meta.test_host, server.meta.test_port),
    interface = _C.interface_name,
  }
  local ret = check(res, server.meta.server_ip)
  log.debug"==== –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ===="
  return ret
end

return _C

