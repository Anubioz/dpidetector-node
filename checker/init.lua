-- luacheck: globals

_G.version  = "0.0.4"
_G.config_default = {
  interval        = 300,
  backend_domain  = "dpidetect.org",
  geo_domain      = "geo.dpidetect.org",
  get_ip_url      = "https://geo.dpidetect.org/get-ip/plain",
}

local json    = require"cjson"
local utils   = require"checker.utils"
local req     = require"checker.requests"
local custom  = require"checker.custom"
local sleep   = utils.sleep
local getenv  = utils.getenv
local getconf = utils.getconf
local log     = utils.logger
local trace   = utils.trace
local ripz    = utils.divine_grenade

_G.proto     = custom.proto
local token  = getenv"token"
local node_id   = getenv"node_id"

_G.DEBUG = os.getenv"DEBUG" or os.getenv(("%s_DEBUG"):format(_G.proto:gsub("-", "_")))
_G.VERBOSE = os.getenv"VERBOSE" or os.getenv(("%s_VERBOSE"):format(_G.proto:gsub("-", "_")))
_G.QUIET = os.getenv"QUIET" and not(_G.VERBOSE or _G.DEBUG)

_G.devnull = io.output("/dev/null")
if _G.QUIET then
  _G.stdout  = _G.devnull
  _G.stderr  = _G.devnull
else
  _G.stdout = io.stdout
  _G.stderr = io.stderr
  io.output(io.stdout)
end

local log_fn = "/tmp/log"
_G.log_fd = _G.devnull

log.debug"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"

_G.headers = {
  ("Token: %s"):format(token),
  ("Software-Version: %s"):format(_G.version),
  "Content-Type: application/json",
}

log.debug"= –í—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π —Ü–∏–∫–ª ="
--- TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ `luv`
while true do
  log.debug"== –ò—Ç–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞—á–∞—Ç–∞ =="

  --- NOTE:
  --- –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
  --- (—á—Ç–æ–±—ã –Ω–æ–¥—ã –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
  --- –ø–æ—Å–º–æ—Ç—Ä–∏–º, –Ω–µ –±—É–¥–µ—Ç –ª–∏ –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ –ø—Ä–æ–±–ª–µ–º

  _G.current_config_json = req{
    url = "https://dpidetector.github.io/config.json"
  }

  local api = ("https://%s/api"):format(getconf"backend_domain")
  local servers_endpoint = ("%s/servers/"):format(api)
  local reports_endpoint = ("%s/reports/"):format(api)
  local interval = getconf"interval"

  local geo = req{
    url = ("https://%s/get-iso/plain"):format(getconf"geo_domain")
  }

  if geo:match"RU" then
    --- NOTE: ‚òùÔ∏è‚òùÔ∏è‚òùÔ∏è
    --- –í—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–¥–∞ –≤—ã—Ö–æ–¥–∏—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ –†–æ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —á–µ—Ä–µ–∑ VPN)
    --- —Ç.–∫. –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å–µ—Ç—è—Ö –∏–º–µ–Ω–Ω–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤,
    --- –∞ —Ç—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ –∑–∞–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –¥–ª—è —ç—Ç–∏—Ö —Ü–µ–ª–µ–π –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω

    if custom.type == "transport" then --- NOTE: vpn/–ø—Ä–æ–∫—Å–∏/–∏ —Ç.–ø.
      local servers_fetched = req{
        url = servers_endpoint,
        headers = _G.headers,
      }

      if servers_fetched:match"COULDNT_CONNECT" then
        --- HACK: (–∫–æ—Å—Ç—ã–ª—å) –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
        --- —Ç–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ—â—ë —Ä–∞–∑
        sleep(2)
        servers_fetched = req{
          url = servers_endpoint,
          headers = _G.headers,
        }
      end

      if servers_fetched
        and servers_fetched:match"domain"
        and servers_fetched:match"^%["
      then
        local ok, e = pcall(json.decode, servers_fetched)
        if not ok then
          log.bad"–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤ (–ø—Ä–∏ —á–∞—Å—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)"
          log.verbose"(–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å JSON —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤)"
          log.debug"====== –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: ======"
          log.debug(servers_fetched)
          log.debug"=================="
          log.debug"====== –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ======"
          log.debug(e)
          log.debug"=================="
        else
          local servers = e or {}
          for idx, server in ipairs(servers) do
            log.debug(("=== [%d] –ò—Ç–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞—á–∞—Ç–∞ ==="):format(idx))

            _G.log_fd = io.open(log_fn, "w+")

            trace(server or { domain="localhost", port = 0, })

            sleep(5) --- NOTE: –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
            log.print"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            local conn = custom.connect(server)

            local report = {
              node_id = tostring(node_id),
              server_domain = tostring(server.domain),
              protocol = tostring(_G.proto),
            }

            if conn then
              log.debug"=== –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ ==="
              sleep(5) --- NOTE: –¥–∞–¥–∏–º –≤—Ä–µ–º—è —Ç—É–Ω–Ω–µ–ª—é "—É—Å—Ç–∞–∫–∞–Ω–∏—Ç—å—Å—è"
              log.debug"=== –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ==="
              local result = custom.checker and custom.checker(server) or false
              log.debug"=== –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ==="
              sleep(3) --- NOTE: –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
              custom.disconnect(server)
              local available = not(not(result))

              report.available = available or false

              if available then
                log.good"C–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è"
              else
                log.bad"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ, –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è"
              end
            else
              report.available = false
              log.bad"–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É"
            end

            _G.log_fd:flush()
            _G.log_fd:seek"set"

            report.log = _G.log_fd:read"*a"

            log.print"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞"
            local resp_json = req{
              url = reports_endpoint,
              post = json.encode(report),
              headers = _G.headers,
              useragent =
                ("DPIDetector/%s (HEISENBUG_DBG, node_id: %s, proto: %s)"):format(_G.version, node_id, custom.proto)
            }

            if resp_json:match"COULDNT_CONNECT" then
              --- HACK: (–∫–æ—Å—Ç—ã–ª—å) –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
              --- —Ç–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑
              sleep(2)
              resp_json = req{
                url = reports_endpoint,
                post = json.encode(report),
                headers = _G.headers,
                useragent =
                  ("DPIDetector/%s (HEISENBUG_DBG, node_id: %s, proto: %s)"):format(_G.version, node_id, custom.proto)
              }
            end

            local rok, resp_t = pcall(json.decode, resp_json)
            if not rok then
              log.bad(
                ("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–µ–∫–µ–Ω–¥–∞! –û–∂–∏–¥–∞–ª—Å—è JSON-–º–∞—Å—Å–∏–≤, –ø–æ–ª—É—á–µ–Ω–æ: %s")
                  :format(resp_json)
              )
              resp_t = {}
            end
            if resp_t.status == "success" then
              log.good(("–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –µ–º—É –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä %s"):format(resp_t.uid or "<–æ—à–∏–±–∫–∞>"))
            else
              log.bad"–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏"
              log.bad"–í–æ–∑–º–æ–∂–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∏–∂–µ –≤–∞–º –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è:"
              log.bad(("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %s"):format(resp_json))
              log.bad"–ï—Å–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç"
            end

            ripz() --- NOTE: üî´üßü
            if _G.need_restart then os.exit(1) end
            --- NOTE: ‚òùÔ∏è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–∞–∫–∞—è-—Ç–æ –¥–∏—á—å

            _G.log_fd:close()
            _G.log_fd = _G.devnull

            log.debug(("=== [%d] –ò—Ç–µ—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==="):format(idx))
          end
        end
      else
        log.bad"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"
        log.bad"–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ä–∞–∑–æ–≤—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä - –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å"
        log.bad"–ï—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
        log.debug"====== –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: ======"
        log.debug(servers_fetched)
        log.debug"=================="
      end
    elseif custom.type == "service" then --- NOTE: –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã, —Å–æ—Ü—Å–µ—Ç–∏, ...
      --- TODO:
      custom.connect()
      custom.check()
      custom.disconnect()
    else
      log.bad"–ó–∞–ø—É—Å–∫–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–≥–æ —É–∑–ª–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    end
  end

  log.debug"== –ò—Ç–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ =="
  log.debug"== –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ =="
  sleep(interval)
end
