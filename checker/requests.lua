return function(settings)
  local cURL  = require"cURL"

  local utils = require"checker.utils"
  local log   = utils.logger
  local split = utils.split

  if type(settings) ~= "table" then settings = {} end
  if not settings.url then error("–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ URL –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å–∞–º–æ–≥–æ URL ü§∑") end

  local hdr = settings.headers or {}
  local hbuf, wbuf = {}, {}
  local c = cURL.easy_init()

  c:setopt_httpheader(hdr)
  c:setopt_followlocation(1)
  if settings.post then
    c:setopt_post(1)
    c:setopt_postfields(settings.post)
  end
  if settings.proxy then
    c:setopt_proxy(settings.proxy)
  end
  c:setopt_useragent(settings.useragent or ("DPIDetector/%s"):format(_G.version))
  if settings.interface then
    c:setopt_interface(settings.interface)
  end
  c:setopt_cookiejar("/tmp/cookies.txt")
  if _G.DEBUG then
    c:setopt_headerfunction(function(chunk) table.insert(hbuf, chunk) end)
    -- c:setopt_header(1) -- –≤–∫–ª—é—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
  end
  c:setopt_url(settings.url)
  c:setopt_writefunction(function(chunk) table.insert(wbuf, chunk) end)

  c:setopt_timeout(settings.timeout or 3)
  c:setopt_connecttimeout(settings.connect_timeout or 3)

  -- c:perform()
  if _G.DEBUG then
    log.debug"=== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ ==="
    log.debug(("====== URL –∑–∞–ø—Ä–æ—Å–∞: %s ======"):format(settings.url))
    if #hdr > 0 then
      log.debug"====== –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ======"
        for _, v in ipairs(hdr) do
          log.debug(("%s"):format(v))
        end
      log.debug"======================"
    end
    if settings.post then
      log.debug"====== –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: ======"
      log.debug(("%s"):format(settings.post))
      log.debug"======================"
    end
    log.debug"=== –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—á–∞—Ç–æ ==="
  end

  local success, errmsg = pcall(c.perform, c)
  if not success then
    log.bad(("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %q"):format(errmsg))
    return errmsg
  end

  c:close()

  local ret = table.concat(wbuf):gsub("[\r\n]*$", "")
  log.debug"=== –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ==="
  log.debug"====== –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ======"
  for _, v in ipairs(
    split(
      table.concat(hbuf or {})
        :gsub("[\r\n]*$", ""),
      "\n"
    )
  ) do
    log.debug(("%s"):format(v))
  end
  log.debug"======================"
  log.debug"====== –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ======"
  log.debug(("%s"):format(ret))
  log.debug"==================="
  return ret
end
